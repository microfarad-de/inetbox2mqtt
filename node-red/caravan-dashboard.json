[
    {
        "id": "37a752f35a68bbed",
        "type": "tab",
        "label": "Top",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b22624498baaa896",
        "type": "tab",
        "label": "Energy",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2561d49b29c858c7",
        "type": "tab",
        "label": "Environment",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "391f51e7377c8273",
        "type": "tab",
        "label": "Climate Control",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c74d4096e08fa272",
        "type": "tab",
        "label": "Climate Control V2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "26a48bdabf7607df",
        "type": "subflow",
        "name": "Alarm",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 100,
                "wires": [
                    {
                        "id": "e7756b84d8b39dfb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 100,
                "wires": [
                    {
                        "id": "e7756b84d8b39dfb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "low",
                "type": "num",
                "value": "0"
            },
            {
                "name": "high",
                "type": "str",
                "value": "100"
            },
            {
                "name": "threshold",
                "type": "num",
                "value": "1"
            },
            {
                "name": "message",
                "type": "str",
                "value": "Indoor temperature"
            },
            {
                "name": "unit",
                "type": "str",
                "value": "Â°C"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "43e263465d4c8532",
        "type": "subflow",
        "name": "Offset",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 100,
                "wires": [
                    {
                        "id": "19512b00b559aaaf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 100,
                "wires": [
                    {
                        "id": "19512b00b559aaaf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "offset",
                "type": "num",
                "value": "0"
            },
            {
                "name": "rounding",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2b1e3a255c9f7549",
        "type": "subflow",
        "name": "Retransmit",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 180,
                "wires": [
                    {
                        "id": "2144215108e68bb4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 140,
                "wires": [
                    {
                        "id": "2144215108e68bb4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 500,
                "y": 220,
                "wires": [
                    {
                        "id": "2144215108e68bb4",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "topic",
                "type": "str",
                "value": "temp"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c515380878a4716f",
        "type": "subflow",
        "name": "Propane %",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 160,
                "wires": [
                    {
                        "id": "5e9aa1427a4e9455"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 160,
                "wires": [
                    {
                        "id": "5e9aa1427a4e9455",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "empty",
                "type": "num",
                "value": "4"
            },
            {
                "name": "full",
                "type": "num",
                "value": "36.5"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c627e40abb963e7a",
        "type": "ui_tab",
        "name": "Environment",
        "icon": "mi-device_thermostat",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f9f7eda377a1ebac",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#0079c9",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Caravan Theme",
                "default": "#4B7930",
                "baseColor": "#087fcb",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#0079c9",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0079c9",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#16a2ff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0079c9",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "dark"
            }
        },
        "site": {
            "name": "Caravan",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf4c6771afb43982",
        "type": "ui_group",
        "name": "Overview",
        "tab": "c627e40abb963e7a",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2c24d1c82633c69e",
        "type": "mqtt-broker",
        "name": "Venus",
        "broker": "localhost",
        "port": "",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b076e87b73537682",
        "type": "ui_tab",
        "name": "Climate Control",
        "icon": "mi-local_fire_department",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9b3a8c49293c5c6a",
        "type": "ui_group",
        "name": "Heater",
        "tab": "b076e87b73537682",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ab3a9f0b2e4b8d1b",
        "type": "ui_group",
        "name": "Status",
        "tab": "b076e87b73537682",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "victron-client-id",
        "type": "victron-client"
    },
    {
        "id": "3e1087bac2188791",
        "type": "ui_tab",
        "name": "Energy",
        "icon": "mi-bolt",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "78e90b890a20dc73",
        "type": "ui_group",
        "name": "Battery",
        "tab": "3e1087bac2188791",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "73cf60e5cc907395",
        "type": "ui_group",
        "name": "Solar",
        "tab": "3e1087bac2188791",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "9fb9e907fe35fd83",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "Karim"
    },
    {
        "id": "9e2c0db2f38c2b58",
        "type": "ui_tab",
        "name": "Hidden",
        "icon": "dashboard",
        "order": 4,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "9c32c704d83eb416",
        "type": "ui_group",
        "d": true,
        "name": "Hidden",
        "tab": "9e2c0db2f38c2b58",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6af9ec52f6b6cf0c",
        "type": "ui_group",
        "name": "Propane",
        "tab": "3e1087bac2188791",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5f674da0b0ac0c54",
        "type": "ui_tab",
        "name": "Climate Control V2",
        "icon": "mi-local_fire_department",
        "order": 5,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "beeb1629e827c723",
        "type": "ui_group",
        "name": "Heater",
        "tab": "5f674da0b0ac0c54",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d88190495de6c61d",
        "type": "ui_group",
        "name": "Status",
        "tab": "5f674da0b0ac0c54",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ca96a5462808e65e",
        "type": "ui_group",
        "name": "Electricity",
        "tab": "3e1087bac2188791",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "97115e12049585a1",
        "type": "ui_group",
        "name": "Outdoor",
        "tab": "c627e40abb963e7a",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "65dcd4fd462cb11e",
        "type": "ui_group",
        "name": "Indoor",
        "tab": "c627e40abb963e7a",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e7756b84d8b39dfb",
        "type": "function",
        "z": "26a48bdabf7607df",
        "name": "Alarm",
        "func": "\nlet val = +msg.payload;  // Convert to an integer\n\nlet low     = env.get('low');\nlet high    = env.get('high');\nlet thr     = env.get('threshold');\nlet message = env.get('message');\nlet unit    = env.get('unit');\n\nlet lastAlarm = context.get('lastAlarm') || false;\nlet alarm = false;\n\nif (val < low) {\n    alarm = 'low';\n}\nelse if (val > high) {\n    alarm = 'high';\n}\nelse if (val > (low + thr) && val < (high - thr)) {\n    alarm = false;\n    context.set('lastAlarm', alarm);\n}\n//node.warn(`val=${val}, low=${low}, high=${high}, thr=${thr}, alarm=${alarm}, lastAlarm=${lastAlarm}`);\n\nif (alarm && alarm != lastAlarm) {\n    context.set('lastAlarm', alarm);\n    msg.payload = `â ï¸ Caravan alert!\\n${message}: ${val} ${unit}`;\n    node.warn(msg.payload);\n    return msg;\n}\nelse {\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "19512b00b559aaaf",
        "type": "function",
        "z": "43e263465d4c8532",
        "name": "Offset",
        "func": "let temp = msg.payload;\n\noffset   = env.get('offset');\nrounding = env.get('rounding');\n\ntemp = temp + offset;\n\nmsg.payload = +(+temp).toFixed(rounding);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2144215108e68bb4",
        "type": "function",
        "z": "2b1e3a255c9f7549",
        "name": "Retransmit",
        "func": "\n// Resend the message if setting has not been applied\n\ntopic = env.get('topic');\nstate = context.get('state');\n\nconst DEBUG = false;\n\nif (msg.topic === topic) {\n   \n    if (DEBUG) node.warn(`Sent ${msg.payload}`);\n    context.set('state', msg.payload);\n    return [null, msg];\n}\nelse {\n    \n    if (state !== undefined) {\n    \n        if (msg.payload === state) {\n            if (DEBUG) node.warn(`Match ${msg.payload}`);\n            context.set('state', undefined);\n            return [msg, null];\n        }\n        else {\n            msg.payload = state;\n            if (DEBUG) node.warn(`Resend ${msg.payload}`);\n            return [null, msg];\n        }\n        \n    }\n    else {\n        return [msg, null];\n    }\n    \n}\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5e9aa1427a4e9455",
        "type": "function",
        "z": "c515380878a4716f",
        "name": "Propane percent",
        "func": "\nempty = env.get('empty');\nfull  = env.get('full');\n\nlevel = msg.payload;\n\npercent = 100 * (level - empty) / (full - empty);\n\nif (percent > 100) {\n    percent = 100;\n}\n\nif (percent < 0) {\n    percent = 0;\n}\n\nmsg.payload = percent.toFixed(0);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "941135a1b6edb738",
        "type": "ui_template",
        "z": "37a752f35a68bbed",
        "group": "9c32c704d83eb416",
        "name": "Connectivity check",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n  .dashboard-disabled {\n    pointer-events: none;\n    /*\n    opacity: 0.8;\n    filter: grayscale(50%);\n    */\n  }\n</style>\n\n<script>\n  (function() {\n    const CHECK_INTERVAL = 5000;\n    const TIMEOUT = 3000;\n\n    function checkServerReachability() {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", \"/ui\", true);\n      let isTimedOut = false;\n      const timeout = setTimeout(() => {\n        isTimedOut = true;\n        xhr.abort();\n        showWarning();\n      }, TIMEOUT);\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4) {\n          clearTimeout(timeout);\n          if (!isTimedOut && xhr.status === 200) {\n            hideWarning();\n          } else {\n            showWarning();\n          }\n        }\n      };\n      xhr.onerror = function() {\n        clearTimeout(timeout);\n        showWarning();\n      };\n      xhr.send();\n    }\n\n    function showWarning() {\n      let el = document.getElementById(\"server-disconnect-warning\");\n      if (!el) {\n        el = document.createElement(\"div\");\n        el.id = \"server-disconnect-warning\";\n        el.style.cssText = \"position:fixed;top:0;left:0;width:100%;background:#ffdddd;color:#b00;padding:10px;text-align:left;font-weight:bold;;font-size:1.1em;z-index:9999;\";\n        el.innerHTML = \"â &nbsp; Connection lost\";\n        document.body.appendChild(el);\n      } else {\n        el.style.display = \"block\";\n      }\n      //document.body.classList.add(\"dashboard-disabled\");\n    }\n\n    function hideWarning() {\n      const el = document.getElementById(\"server-disconnect-warning\");\n      if (el) {\n        el.style.display = \"none\";\n      }\n      //document.body.classList.remove(\"dashboard-disabled\");\n    }\n\n    setInterval(checkServerReachability, CHECK_INTERVAL);\n    checkServerReachability();\n  })();\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 130,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "ef5e0433c7f553e3",
        "type": "ui_template",
        "z": "37a752f35a68bbed",
        "group": "9c32c704d83eb416",
        "name": "Disable text selection",
        "order": 3,
        "width": 0,
        "height": 0,
        "format": "<style>\n    /* Disable text selection across the entire dashboard */\n    body, .nr-dashboard-template, .nr-dashboard-container {\n        user-select: none;\n        -webkit-user-select: none; /* Safari/Chrome */\n        -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* Internet Explorer */\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 140,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7a5ee5e1791de897",
        "type": "ui_template",
        "z": "37a752f35a68bbed",
        "group": "9c32c704d83eb416",
        "name": "Disable zoom",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui\">\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 120,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2f93affb367a865e",
        "type": "link in",
        "z": "37a752f35a68bbed",
        "name": "Send WhatsApp",
        "links": [
            "08fe98afcefbc02c",
            "14753609f7bc5747",
            "210d9c2dfb32db9e",
            "335af24ca01463cb",
            "60b4291ab1bc4195",
            "713473bc2af8430d",
            "9141f247602e75b7",
            "dfc1f32cb802a02e",
            "e1dd06c5c761e4d9",
            "f2fa448128ce1972",
            "f59d101299f0716e",
            "f8b062643e6b87e5"
        ],
        "x": 55,
        "y": 360,
        "wires": [
            [
                "fceb7b2903eca364"
            ]
        ]
    },
    {
        "id": "fceb7b2903eca364",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "37a752f35a68bbed",
        "name": "",
        "credtype": "account",
        "account": "9fb9e907fe35fd83",
        "text": "payload",
        "phonenumbervalue": "",
        "apikeyvalue": "",
        "apikeyinputtypemessage": "msg",
        "phonenumberinputtypemessage": "msg",
        "inputtypemessage": "msg",
        "rejectssl": false,
        "x": 200,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "dd7f9288ca8b3848",
        "type": "ui_template",
        "z": "37a752f35a68bbed",
        "group": "ca96a5462808e65e",
        "name": "Custom styles",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n  .large-text {\n    font-size: 24px !important;\n  }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "4d22e4a2b451ad0b",
        "type": "victron-input-solarcharger",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/Yield/Power",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "SmartSolar Charger MPPT 100/20 48V"
        },
        "pathObj": {
            "path": "/Yield/Power",
            "type": "float",
            "name": "PV Power (W)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "0",
        "x": 240,
        "y": 600,
        "wires": [
            [
                "09aa29457cb04e05",
                "46b76bb9641629d0"
            ]
        ]
    },
    {
        "id": "0f4851a0740942b4",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Voltage",
        "format": "{{msg.payload}} V",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 700,
        "wires": []
    },
    {
        "id": "4349069380bcd671",
        "type": "victron-input-solarcharger",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/Pv/V",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "SmartSolar Charger MPPT 100/20 48V"
        },
        "pathObj": {
            "path": "/Pv/V",
            "type": "float",
            "name": "PV voltage"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 230,
        "y": 700,
        "wires": [
            [
                "0f4851a0740942b4"
            ]
        ]
    },
    {
        "id": "4222164f2945fc86",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Current",
        "format": "{{msg.payload}} A",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 900,
        "wires": []
    },
    {
        "id": "16237dfdc1cca256",
        "type": "victron-input-solarcharger",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "Solar Charger"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 180,
        "y": 880,
        "wires": [
            [
                "4222164f2945fc86",
                "cf806006b8743774"
            ]
        ]
    },
    {
        "id": "7043f4ea18184a75",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "78e90b890a20dc73",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Voltage",
        "format": "{{msg.payload}} V",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "18",
        "color": "#000000",
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "f909117d2080cfbd",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "78e90b890a20dc73",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Current",
        "format": "{{msg.payload}} A",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 400,
        "wires": []
    },
    {
        "id": "6e13fcff475194b8",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "State",
        "format": "{{msg.textvalue}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 710,
        "y": 780,
        "wires": []
    },
    {
        "id": "c1f210a816af8226",
        "type": "victron-input-solarcharger",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/State",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "Solar Charger"
        },
        "pathObj": {
            "path": "/State",
            "type": "enum",
            "name": "Charge state",
            "enum": {
                "0": "Off",
                "2": "Fault",
                "3": "Bulk",
                "4": "Absorption",
                "5": "Float",
                "6": "Storage",
                "7": "Equalize",
                "245": "Off",
                "247": "Equalize",
                "252": "External Control"
            }
        },
        "initial": "",
        "name": "",
        "onlyChanges": false,
        "roundValues": "3",
        "x": 160,
        "y": 780,
        "wires": [
            [
                "6e13fcff475194b8"
            ]
        ]
    },
    {
        "id": "f1a4e42038e4063d",
        "type": "victron-input-battery",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.battery/289",
        "path": "/Soc",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/Soc",
            "type": "float",
            "name": "State of charge (%)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "0",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "26f7cb849699ceef",
                "3d67f44cd7588cf5",
                "9f07b3e7f5799a7d"
            ]
        ]
    },
    {
        "id": "f9afb605184c3be9",
        "type": "victron-input-battery",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.battery/289",
        "path": "/Dc/0/Voltage",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/Dc/0/Voltage",
            "type": "float",
            "name": "Battery voltage (V)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "7043f4ea18184a75",
                "699563266351b1e3"
            ]
        ]
    },
    {
        "id": "e63362591c8c6fbb",
        "type": "victron-input-battery",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.battery/289",
        "path": "/Dc/0/Current",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/Dc/0/Current",
            "type": "float",
            "name": "Battery current (A)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "2",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "f909117d2080cfbd",
                "205bf35e3297da13"
            ]
        ]
    },
    {
        "id": "dbf406ca351cbe4a",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "78e90b890a20dc73",
        "order": 5,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Time remaining",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 740,
        "y": 520,
        "wires": []
    },
    {
        "id": "0310f30d85c0a6e7",
        "type": "victron-input-battery",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.battery/289",
        "path": "/TimeToGo",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/TimeToGo",
            "type": "float",
            "name": "Time to go (s)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "150b6139a9534c68"
            ]
        ]
    },
    {
        "id": "150b6139a9534c68",
        "type": "function",
        "z": "b22624498baaa896",
        "name": "Sec. to d/h",
        "func": "let totalSeconds = msg.payload;\n\nlet days = Math.floor(totalSeconds / 86400); // 86400 seconds in a day\nlet hours = Math.floor((totalSeconds % 86400) / 3600); // Remaining hours\n\nif (totalSeconds === null ) {\n    msg.payload = `--`;\n}\nelse {\n    msg.payload = `${days} d &nbsp;${hours} h`;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 520,
        "wires": [
            [
                "dbf406ca351cbe4a"
            ]
        ]
    },
    {
        "id": "41d9e01fcc702672",
        "type": "victron-input-battery",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.battery/289",
        "path": "/ConsumedAmphours",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/ConsumedAmphours",
            "type": "float",
            "name": "Consumed Amphours (Ah)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 180,
        "y": 460,
        "wires": [
            [
                "f33aa0023c70b646"
            ]
        ]
    },
    {
        "id": "f33aa0023c70b646",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "78e90b890a20dc73",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Consumed Ah",
        "format": "{{msg.payload}} Ah",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "b606e7edf0b64565",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Yield today",
        "format": "{{msg.payload}} Wh",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 1000,
        "wires": []
    },
    {
        "id": "6b590f0911fba275",
        "type": "victron-input-solarcharger",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.solarcharger/289",
        "path": "/History/Daily/0/Yield",
        "serviceObj": {
            "service": "com.victronenergy.solarcharger/289",
            "name": "SmartSolar Charger MPPT 100/20 48V"
        },
        "pathObj": {
            "path": "/History/Daily/0/Yield",
            "type": "float",
            "name": "Yield today (kWh)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "3",
        "x": 250,
        "y": 980,
        "wires": [
            [
                "53a95fb1c4d6126a"
            ]
        ]
    },
    {
        "id": "53a95fb1c4d6126a",
        "type": "function",
        "z": "b22624498baaa896",
        "name": "KWh to Wh",
        "func": "let kwh = msg.payload;\n\nmsg.payload = kwh * 1000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 980,
        "wires": [
            [
                "b606e7edf0b64565",
                "23f82b00596bb58f"
            ]
        ]
    },
    {
        "id": "210d9c2dfb32db9e",
        "type": "link out",
        "z": "b22624498baaa896",
        "name": "Battery level alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 675,
        "y": 180,
        "wires": []
    },
    {
        "id": "26f7cb849699ceef",
        "type": "subflow:26a48bdabf7607df",
        "z": "b22624498baaa896",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "20",
                "type": "num"
            },
            {
                "name": "message",
                "value": "Battery charge",
                "type": "str"
            },
            {
                "name": "unit",
                "value": "%",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "210d9c2dfb32db9e"
            ]
        ]
    },
    {
        "id": "53d71d6f0ddc2d86",
        "type": "victron-input-custom",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.tank/21",
        "path": "/RawValue",
        "serviceObj": {
            "service": "com.victronenergy.tank/21",
            "name": "Propane Tank 1 (21)"
        },
        "pathObj": {
            "path": "/RawValue",
            "name": "/RawValue",
            "type": "number",
            "value": 37.219444274902344
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 170,
        "y": 1080,
        "wires": [
            [
                "a4fe06dad0e33752"
            ]
        ]
    },
    {
        "id": "a4fe06dad0e33752",
        "type": "subflow:c515380878a4716f",
        "z": "b22624498baaa896",
        "name": "",
        "env": [
            {
                "name": "empty",
                "value": "3.8",
                "type": "num"
            }
        ],
        "x": 390,
        "y": 1080,
        "wires": [
            [
                "56bfe721ed8b5675",
                "415b970528d22d1f",
                "7b2f7f2e58253c60"
            ]
        ]
    },
    {
        "id": "bcbcc2ea62ba3ecd",
        "type": "subflow:c515380878a4716f",
        "z": "b22624498baaa896",
        "name": "",
        "env": [
            {
                "name": "empty",
                "value": "3.8",
                "type": "str"
            },
            {
                "name": "full",
                "value": "36.5",
                "type": "str"
            }
        ],
        "x": 390,
        "y": 1220,
        "wires": [
            [
                "b2790ee93b81319a",
                "a3e4eeb2cd73eb95",
                "f1b9d5e34d3f83e3"
            ]
        ]
    },
    {
        "id": "2abf196677a68301",
        "type": "victron-input-custom",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.tank/20",
        "path": "/RawValue",
        "serviceObj": {
            "service": "com.victronenergy.tank/20",
            "name": "Propane Tank 2 (20)"
        },
        "pathObj": {
            "path": "/RawValue",
            "name": "/RawValue",
            "type": "number",
            "value": 4.921152114868164
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 170,
        "y": 1220,
        "wires": [
            [
                "bcbcc2ea62ba3ecd"
            ]
        ]
    },
    {
        "id": "56bfe721ed8b5675",
        "type": "subflow:26a48bdabf7607df",
        "z": "b22624498baaa896",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "threshold",
                "value": "20",
                "type": "num"
            },
            {
                "name": "message",
                "value": "Left propane tank",
                "type": "str"
            },
            {
                "name": "unit",
                "value": "%",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 1140,
        "wires": [
            [
                "9141f247602e75b7"
            ]
        ]
    },
    {
        "id": "9141f247602e75b7",
        "type": "link out",
        "z": "b22624498baaa896",
        "name": "Propane tank 1 alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 675,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b2790ee93b81319a",
        "type": "subflow:26a48bdabf7607df",
        "z": "b22624498baaa896",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "threshold",
                "value": "20",
                "type": "num"
            },
            {
                "name": "message",
                "value": "Right propane tank",
                "type": "str"
            },
            {
                "name": "unit",
                "value": "%",
                "type": "str"
            }
        ],
        "x": 570,
        "y": 1280,
        "wires": [
            [
                "14753609f7bc5747"
            ]
        ]
    },
    {
        "id": "14753609f7bc5747",
        "type": "link out",
        "z": "b22624498baaa896",
        "name": "Propane tank 2 alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 675,
        "y": 1280,
        "wires": []
    },
    {
        "id": "f3ef51f7ef9dc487",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "9c32c704d83eb416",
        "order": 3,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Left temp",
        "format": "{{msg.payload}} Â°C",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 720,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f9f81584fb2117b3",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "9c32c704d83eb416",
        "order": 4,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Right temp",
        "format": "{{msg.payload}} Â°C",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 730,
        "y": 1400,
        "wires": []
    },
    {
        "id": "bf85fd8b06bfa703",
        "type": "victron-input-temperature",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.tank/21",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.tank/21",
            "name": "Propane Tank 1"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 180,
        "y": 1340,
        "wires": [
            [
                "f3ef51f7ef9dc487"
            ]
        ]
    },
    {
        "id": "41d09f2e4416a18c",
        "type": "victron-input-temperature",
        "z": "b22624498baaa896",
        "service": "com.victronenergy.tank/20",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.tank/20",
            "name": "Propane Tank 2"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 180,
        "y": 1400,
        "wires": [
            [
                "f9f81584fb2117b3"
            ]
        ]
    },
    {
        "id": "3d67f44cd7588cf5",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "ca96a5462808e65e",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Battery",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#e6e600",
            "#e6e600",
            "#e6e600"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 720,
        "y": 100,
        "wires": []
    },
    {
        "id": "09aa29457cb04e05",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "ca96a5462808e65e",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Solar",
        "label": "W",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "colors": [
            "#e6e600",
            "#e6e600",
            "#e6e600"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "415b970528d22d1f",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "6af9ec52f6b6cf0c",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Left",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00c7fc",
            "#00c7fc",
            "#00c7fc"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a3e4eeb2cd73eb95",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "6af9ec52f6b6cf0c",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Right",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00c7fc",
            "#00c7fc",
            "#00c7fc"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 1200,
        "wires": []
    },
    {
        "id": "9f07b3e7f5799a7d",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "78e90b890a20dc73",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}} %",
        "layout": "col-center",
        "className": "large-text",
        "style": false,
        "font": "",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "46b76bb9641629d0",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "{{msg.payload}} W",
        "layout": "col-center",
        "className": "large-text",
        "style": false,
        "font": "",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 710,
        "y": 620,
        "wires": []
    },
    {
        "id": "7b2f7f2e58253c60",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "9c32c704d83eb416",
        "order": 1,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Left tank",
        "format": "{{msg.payload}} %",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 720,
        "y": 1100,
        "wires": []
    },
    {
        "id": "f1b9d5e34d3f83e3",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "9c32c704d83eb416",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "",
        "label": "Right tank",
        "format": "{{msg.payload}} %",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "24",
        "color": "#ffffff",
        "x": 730,
        "y": 1240,
        "wires": []
    },
    {
        "id": "4f1a3eb1c8709dde",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "6af9ec52f6b6cf0c",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 710,
        "y": 1460,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "699563266351b1e3",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "ca96a5462808e65e",
        "order": 3,
        "width": 2,
        "height": 2,
        "gtype": "donut",
        "title": "",
        "label": "V",
        "format": "{{value}}",
        "min": "11",
        "max": "15",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "205bf35e3297da13",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "ca96a5462808e65e",
        "order": 4,
        "width": 2,
        "height": 2,
        "gtype": "donut",
        "title": "",
        "label": "A",
        "format": "{{value}}",
        "min": "-30",
        "max": "30",
        "colors": [
            "#ca3838",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 360,
        "wires": []
    },
    {
        "id": "cf806006b8743774",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "9c32c704d83eb416",
        "order": 5,
        "width": 2,
        "height": 2,
        "gtype": "donut",
        "title": "",
        "label": "A",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 860,
        "wires": []
    },
    {
        "id": "7ec1232e8a62734e",
        "type": "ui_text",
        "z": "b22624498baaa896",
        "group": "73cf60e5cc907395",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 710,
        "y": 1500,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "23f82b00596bb58f",
        "type": "ui_gauge",
        "z": "b22624498baaa896",
        "name": "",
        "group": "ca96a5462808e65e",
        "order": 5,
        "width": 2,
        "height": 2,
        "gtype": "donut",
        "title": "",
        "label": "Wh",
        "format": "{{value}}",
        "min": 0,
        "max": "1500",
        "colors": [
            "#e6e600",
            "#e6e600",
            "#e6e600"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 960,
        "wires": []
    },
    {
        "id": "e17db9ed39276503",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "d": true,
        "name": "",
        "group": "9c32c704d83eb416",
        "order": 7,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "CPU",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "90",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 1100,
        "wires": []
    },
    {
        "id": "0d95bf949c201846",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/29",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.temperature/29",
            "name": "com.victronenergy.temperature/29"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "efcd52eb9123c4b6"
            ]
        ]
    },
    {
        "id": "a143838f0999d97b",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 5,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Outdoor",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 800,
        "y": 260,
        "wires": []
    },
    {
        "id": "1cbbd964a196c7d8",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/20",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.temperature/20",
            "name": "Outdoor"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 150,
        "y": 440,
        "wires": [
            [
                "a852c58b3b285f49"
            ]
        ]
    },
    {
        "id": "e9e6e61455e7859a",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/20",
        "path": "/Humidity",
        "serviceObj": {
            "service": "com.victronenergy.temperature/20",
            "name": "Outdoor"
        },
        "pathObj": {
            "path": "/Humidity",
            "type": "float",
            "name": "Humidity (%)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 140,
        "y": 500,
        "wires": [
            [
                "5a1c2139256a9b7c"
            ]
        ]
    },
    {
        "id": "24ad0f6f10a8086e",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 2,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Fridge",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 700,
        "wires": []
    },
    {
        "id": "03367e769796dea2",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/21",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.temperature/21",
            "name": "Fridge"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 150,
        "y": 700,
        "wires": [
            [
                "3c84ac16a56e8271"
            ]
        ]
    },
    {
        "id": "cefda18b76d95a02",
        "type": "victron-input-battery",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.battery/289",
        "path": "/Dc/0/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.battery/289",
            "name": "Battery"
        },
        "pathObj": {
            "path": "/Dc/0/Temperature",
            "type": "float",
            "name": "Battery temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 170,
        "y": 1240,
        "wires": [
            [
                "ee9a4211b556cacf"
            ]
        ]
    },
    {
        "id": "de056db018f84c0f",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 3,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Battery",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 800,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9e5aa2e8d55e9cd2",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "cf4c6771afb43982",
        "order": 7,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 1380,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "f46d628d15bf17ce",
        "type": "mqtt in",
        "z": "2561d49b29c858c7",
        "name": "Water temperature",
        "topic": "service/truma/control_status/current_temp_water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 960,
        "wires": [
            [
                "7d902834cd76bb07"
            ]
        ]
    },
    {
        "id": "e7fa40a69f3f7e54",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Water",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "90",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 960,
        "wires": []
    },
    {
        "id": "f2fa448128ce1972",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "Outdoor temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 380,
        "wires": []
    },
    {
        "id": "f59d101299f0716e",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "Fridge temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 780,
        "wires": []
    },
    {
        "id": "08fe98afcefbc02c",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "Battery temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 1320,
        "wires": []
    },
    {
        "id": "dfc1f32cb802a02e",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "CPU temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 1180,
        "wires": []
    },
    {
        "id": "335af24ca01463cb",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "Water temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 1040,
        "wires": []
    },
    {
        "id": "6296b4c566c5530e",
        "type": "mqtt in",
        "z": "2561d49b29c858c7",
        "name": "Room temperature",
        "topic": "service/truma/control_status/current_temp_room",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 100,
        "wires": [
            [
                "e50497657df013ef"
            ]
        ]
    },
    {
        "id": "e1dd06c5c761e4d9",
        "type": "link out",
        "z": "2561d49b29c858c7",
        "name": "Room temp alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "9233787d27554fa6",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 1,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Indoor",
        "label": "Â°C",
        "format": "{{value}}",
        "min": "-10",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 790,
        "y": 100,
        "wires": []
    },
    {
        "id": "f8c13de4be546aa7",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "high",
                "value": "30",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 180,
        "wires": [
            [
                "e1dd06c5c761e4d9"
            ]
        ]
    },
    {
        "id": "e577c0ec5b4af224",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "high",
                "value": "30",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Outdoor temperature",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "f2fa448128ce1972"
            ]
        ]
    },
    {
        "id": "925f92e5f41b2072",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "1",
                "type": "num"
            },
            {
                "name": "high",
                "value": "6",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Fridge temperature",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 780,
        "wires": [
            [
                "f59d101299f0716e"
            ]
        ]
    },
    {
        "id": "3e0b6cee6fa14daa",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "threshold",
                "value": "5",
                "type": "num"
            },
            {
                "name": "message",
                "value": "Water temperature",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 1040,
        "wires": [
            [
                "335af24ca01463cb"
            ]
        ]
    },
    {
        "id": "4bd74f30706ccf3c",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "high",
                "value": "60",
                "type": "str"
            },
            {
                "name": "threshold",
                "value": "5",
                "type": "num"
            },
            {
                "name": "message",
                "value": "CPU temperature",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 1180,
        "wires": [
            [
                "dfc1f32cb802a02e"
            ]
        ]
    },
    {
        "id": "746dd63504103d04",
        "type": "subflow:26a48bdabf7607df",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "low",
                "value": "5",
                "type": "num"
            },
            {
                "name": "high",
                "value": "30",
                "type": "str"
            },
            {
                "name": "message",
                "value": "Battery temperature",
                "type": "str"
            }
        ],
        "x": 650,
        "y": 1320,
        "wires": [
            [
                "08fe98afcefbc02c"
            ]
        ]
    },
    {
        "id": "e50497657df013ef",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "x": 510,
        "y": 100,
        "wires": [
            [
                "f8c13de4be546aa7",
                "9233787d27554fa6",
                "5d8f446b14505019"
            ]
        ]
    },
    {
        "id": "3c84ac16a56e8271",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "offset",
                "value": "-0.2",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 700,
        "wires": [
            [
                "24ad0f6f10a8086e",
                "925f92e5f41b2072",
                "81433703790e3883"
            ]
        ]
    },
    {
        "id": "7d902834cd76bb07",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 960,
        "wires": [
            [
                "e7fa40a69f3f7e54",
                "3e0b6cee6fa14daa",
                "d160dd8dde0f1ab4"
            ]
        ]
    },
    {
        "id": "efcd52eb9123c4b6",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "e17db9ed39276503",
                "4bd74f30706ccf3c",
                "14904e43ccce732d"
            ]
        ]
    },
    {
        "id": "ee9a4211b556cacf",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 1240,
        "wires": [
            [
                "de056db018f84c0f",
                "746dd63504103d04",
                "a61c5737b0176740"
            ]
        ]
    },
    {
        "id": "fbb485a57854c7ce",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.tank/21",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.tank/21",
            "name": "Propane Tank 1"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 180,
        "y": 220,
        "wires": [
            [
                "ed0b389fe13487c0"
            ]
        ]
    },
    {
        "id": "6a1439c4cd40cd39",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.tank/20",
        "path": "/Temperature",
        "serviceObj": {
            "service": "com.victronenergy.tank/20",
            "name": "Propane Tank 2"
        },
        "pathObj": {
            "path": "/Temperature",
            "type": "float",
            "name": "Temperature (Â°C)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 180,
        "y": 280,
        "wires": [
            [
                "4bbd63596c1f0a25"
            ]
        ]
    },
    {
        "id": "db7e61c450302526",
        "type": "function",
        "z": "2561d49b29c858c7",
        "name": "Max",
        "func": "\n// Get the stored array or initialize if it doesn't exist\nlet values = context.get('values') || [];\n\n// Add the new payload\nvalues.push(msg.payload);\n\n// Keep only the last 10 values\nif (values.length > 5) {\n    values.shift(); // Remove the oldest value\n}\n\n// Store the updated array back to context\ncontext.set('values', values);\n\n// Find the maximum value\nlet max = Math.max(...values);\n\n// Send the maximum value\nmsg.payload = max;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 260,
        "wires": [
            [
                "a143838f0999d97b",
                "e577c0ec5b4af224"
            ]
        ]
    },
    {
        "id": "ed0b389fe13487c0",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "db7e61c450302526",
                "2b9799a67c85734a"
            ]
        ]
    },
    {
        "id": "4bbd63596c1f0a25",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "db7e61c450302526",
                "9dcb2a56c12c8eb7"
            ]
        ]
    },
    {
        "id": "a852c58b3b285f49",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "offset",
                "value": "-0.4",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "149f7ce1ff8fae6d"
            ]
        ]
    },
    {
        "id": "5a1c2139256a9b7c",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "644e7643d6ba3004",
                "33503f1b85b1f1f9"
            ]
        ]
    },
    {
        "id": "5d8f446b14505019",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Room temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "2b9799a67c85734a",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature sensor 1",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 300,
        "wires": []
    },
    {
        "id": "9dcb2a56c12c8eb7",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature sensor 2",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "149f7ce1ff8fae6d",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Temperature sensor 3",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 440,
        "wires": []
    },
    {
        "id": "644e7643d6ba3004",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Relative humidity",
        "format": "{{msg.payload}} %",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "81433703790e3883",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fridge temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 740,
        "wires": []
    },
    {
        "id": "a39461b4f6e6f09c",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/21",
        "path": "/Humidity",
        "serviceObj": {
            "service": "com.victronenergy.temperature/21",
            "name": "Fridge"
        },
        "pathObj": {
            "path": "/Humidity",
            "type": "float",
            "name": "Humidity (%)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 140,
        "y": 820,
        "wires": [
            [
                "32b738159ce24492"
            ]
        ]
    },
    {
        "id": "32b738159ce24492",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "d7558c58023f204e"
            ]
        ]
    },
    {
        "id": "d7558c58023f204e",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fridge humidity",
        "format": "{{msg.payload}} %",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 820,
        "wires": []
    },
    {
        "id": "e87c0d6477af1172",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/20",
        "path": "/Pressure",
        "serviceObj": {
            "service": "com.victronenergy.temperature/20",
            "name": "Outdoor"
        },
        "pathObj": {
            "path": "/Pressure",
            "type": "float",
            "name": "Pressure (kPa)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "042c33c4332e30d9"
            ]
        ]
    },
    {
        "id": "042c33c4332e30d9",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "a41d0565a4b07df5"
            ]
        ]
    },
    {
        "id": "a41d0565a4b07df5",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Atmospheric pressure",
        "format": "{{msg.payload}} kPa",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 600,
        "wires": []
    },
    {
        "id": "d160dd8dde0f1ab4",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 1000,
        "wires": []
    },
    {
        "id": "14904e43ccce732d",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "CPU temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 830,
        "y": 1140,
        "wires": []
    },
    {
        "id": "a61c5737b0176740",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "65dcd4fd462cb11e",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Battery temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 840,
        "y": 1280,
        "wires": []
    },
    {
        "id": "2187231013dcbb0d",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "97115e12049585a1",
        "order": 6,
        "width": 6,
        "height": 1,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 790,
        "y": 1420,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "33503f1b85b1f1f9",
        "type": "ui_gauge",
        "z": "2561d49b29c858c7",
        "name": "",
        "group": "cf4c6771afb43982",
        "order": 6,
        "width": 3,
        "height": 3,
        "gtype": "donut",
        "title": "Outdoor RH",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 810,
        "y": 500,
        "wires": []
    },
    {
        "id": "54b8b391b4c95d52",
        "type": "victron-input-temperature",
        "z": "2561d49b29c858c7",
        "service": "com.victronenergy.temperature/21",
        "path": "/Pressure",
        "serviceObj": {
            "service": "com.victronenergy.temperature/21",
            "name": "Fridge"
        },
        "pathObj": {
            "path": "/Pressure",
            "type": "float",
            "name": "Pressure (kPa)"
        },
        "name": "",
        "onlyChanges": false,
        "roundValues": "1",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "98e6a917b4fd4888"
            ]
        ]
    },
    {
        "id": "98e6a917b4fd4888",
        "type": "subflow:43e263465d4c8532",
        "z": "2561d49b29c858c7",
        "name": "",
        "env": [
            {
                "name": "rounding",
                "value": "0",
                "type": "num"
            }
        ],
        "x": 510,
        "y": 880,
        "wires": [
            [
                "9421369420060cce"
            ]
        ]
    },
    {
        "id": "9421369420060cce",
        "type": "ui_text",
        "z": "2561d49b29c858c7",
        "group": "9c32c704d83eb416",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Fridge pressure",
        "format": "{{msg.payload}} kPa",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 880,
        "wires": []
    },
    {
        "id": "7df678563a819cc4",
        "type": "ui_switch",
        "z": "391f51e7377c8273",
        "name": "",
        "label": "Heating",
        "tooltip": "",
        "group": "9b3a8c49293c5c6a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "switch",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 380,
        "y": 40,
        "wires": [
            [
                "3f6ad65acd3a5234",
                "c71fb3d32cdf6139",
                "95a5eca3262d042c"
            ]
        ]
    },
    {
        "id": "f6d22ec56a889695",
        "type": "ui_dropdown",
        "z": "391f51e7377c8273",
        "name": "",
        "label": "&nbsp;Fan setting &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "9b3a8c49293c5c6a",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "ECO",
                "value": "eco",
                "type": "str"
            },
            {
                "label": "HIGH",
                "value": "high",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "fan",
        "topicType": "str",
        "className": "grayout-target fan-target",
        "x": 675,
        "y": 320,
        "wires": [
            [
                "bce2301e12d1e263",
                "7dcb693e456897db",
                "ad544c551d347711"
            ]
        ],
        "l": false
    },
    {
        "id": "8ede93c0d2432a6d",
        "type": "ui_dropdown",
        "z": "391f51e7377c8273",
        "name": "",
        "label": "&nbsp;Water temperature &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "9b3a8c49293c5c6a",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": 0,
                "type": "num"
            },
            {
                "label": "ECO",
                "value": 40,
                "type": "num"
            },
            {
                "label": "HOT",
                "value": 60,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "water",
        "topicType": "str",
        "className": "water-target",
        "x": 665,
        "y": 460,
        "wires": [
            [
                "c71fb3d32cdf6139",
                "c8759ddbb78783e0",
                "1303a8a0513a810e"
            ]
        ],
        "l": false
    },
    {
        "id": "c268d215c0a29312",
        "type": "ui_dropdown",
        "z": "391f51e7377c8273",
        "name": "",
        "label": "&nbsp;Energy selection &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "9b3a8c49293c5c6a",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Gas",
                "value": "gas",
                "type": "str"
            },
            {
                "label": "Electric 1",
                "value": "electric1",
                "type": "str"
            },
            {
                "label": "Electric 2",
                "value": "electric2",
                "type": "str"
            },
            {
                "label": "Mix 1",
                "value": "mix1",
                "type": "str"
            },
            {
                "label": "Mix 2",
                "value": "mix2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "mix",
        "topicType": "str",
        "className": "grayout-target-2 mix-target",
        "x": 665,
        "y": 620,
        "wires": [
            [
                "141ce33d897ac41a",
                "de9f3cc27ab9eee4"
            ]
        ],
        "l": false
    },
    {
        "id": "6427f73155b45c3a",
        "type": "ui_text",
        "z": "391f51e7377c8273",
        "group": "ab3a9f0b2e4b8d1b",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Room temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "3dd9c191a2d56f94",
        "type": "ui_text",
        "z": "391f51e7377c8273",
        "group": "ab3a9f0b2e4b8d1b",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 900,
        "wires": []
    },
    {
        "id": "6192907fb799f322",
        "type": "ui_text",
        "z": "391f51e7377c8273",
        "group": "ab3a9f0b2e4b8d1b",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "System status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "red-error",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 660,
        "y": 960,
        "wires": []
    },
    {
        "id": "3f6ad65acd3a5234",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Grayout 1",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<style>\n.grayout {\n    pointer-events: none;\n    filter: opacity(50%);\n    /*display: none;*/\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(value) {\n        const controls = document.querySelectorAll('.grayout-target');\n        controls.forEach(el => {\n            if (!value) {\n                el.classList.add('grayout');\n            } else {\n                el.classList.remove('grayout');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c71fb3d32cdf6139",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Grayout 2",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    let states = { switch1: false, switch2: false };\n\n    scope.$watch('msg', function(msg) {\n        if (!msg || typeof msg.payload === 'undefined') return;\n\n        // Update the state depending on which switch sent the message\n        if (msg.topic === \"switch\") states.switch1 = msg.payload;\n        if (msg.topic === \"water\") states.switch2 = msg.payload;\n\n        // Enable if either switch is true\n        const shouldEnable = states.switch1 || states.switch2;\n\n        // Add or remove the 'grayout' class from the grayout-target elements\n        const elements = document.querySelectorAll('.grayout-target-2');\n        elements.forEach(el => {\n            if (shouldEnable) {\n                el.classList.remove('grayout');\n            } else {\n                el.classList.add('grayout');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8c25986c65998ad3",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Energy select",
        "func": "\n// Define the lookup table\nconst lookupTable = {\n    \"gas\":       { value1: \"gas\",         value2: 0    },\n    \"electric1\": { value1: \"electricity\", value2: 900  },\n    \"electric2\": { value1: \"electricity\", value2: 1800 },\n    \"mix1\":      { value1: \"mix\",         value2: 900  },\n    \"mix2\":      { value1: \"mix\",         value2: 1800 }\n};\n\n// Get the input value (e.g., from msg.payload)\nlet inputValue = msg.payload;\n\n// Check the lookup table and get the results\nlet result = lookupTable[inputValue] || { value1: \"gas\", value2: 0 };\n\n// Prepare two different messages\nlet msg1 = { payload: result.value1, topic: 'mix' };  // Message for the first output\nlet msg2 = { payload: result.value2, topic: 'mix' };  // Message for the second output\n\n// Return both messages to different outputs\nreturn [msg1, msg2];  // Sends msg1 to output 1, and msg2 to output 2\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 680,
        "wires": [
            [
                "e123175452a0c255"
            ],
            [
                "864ec9dedede4187"
            ]
        ]
    },
    {
        "id": "c7fd42bc843cc3f0",
        "type": "ui_text",
        "z": "391f51e7377c8273",
        "group": "ab3a9f0b2e4b8d1b",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 1080,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "6f65acc61017824f",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Set temp",
        "func": "\nflow.set(\"temp\", msg.payload);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "7dcb693e456897db",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Set fan",
        "func": "\nflow.set(\"fan\", msg.payload);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "95a5eca3262d042c",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Heating trigger",
        "func": "\nlet state   = context.get('state');\n\nconst DEBUG = false;\n\nif (msg.from_mqtt === true) {\n    \n    let msg3 = null;\n    \n    // Retransmit message if setting was not applied\n    if (state !== undefined) {\n        if (msg.payload === state) {\n            if (DEBUG) node.warn(`match switch ${msg.payload}`)\n            context.set('state', undefined);\n        }\n        else if (state === true) {\n            if (DEBUG) node.warn('resend switch on')\n            msg3 = { payload: true};\n        }\n        else {\n            if (DEBUG) node.warn('resend switch off')\n            msg3 = { payload: false};\n        }\n    }\n        \n    if (DEBUG) node.warn(`msg3 = ${msg3}`)\n    return [null, null, msg3];\n    \n}\nelse if (msg.payload === true) {\n    \n    context.set('state', true);\n    flow.set('switch', true);\n    \n    let temp = flow.get('temp');\n    let fan = flow.get('fan');\n    \n    if (temp === undefined) {\n        temp = 20;\n    }\n    \n    if (fan === undefined) {\n        fan = \"eco\";\n    }\n\n    // Prepare two different messages\n    let msg1 = { payload: temp, topic: 'temp' }; \n    let msg2 = { payload: fan,  topic: 'fan' };\n    return [msg1, msg2, null];\n\n}\nelse {\n    context.set('state', false);\n    flow.set('switch', false);\n    \n    let msg1 = { payload: 0,     topic: 'temp' }\n    let msg2 = { payload: 'off', topic: 'fan' };\n    return [msg1, msg2, null];\n    \n}\n    \n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "783ddd3bdb365462",
                "8e85ae446e921901"
            ],
            [
                "ad544c551d347711",
                "bce2301e12d1e263"
            ],
            [
                "7df678563a819cc4"
            ]
        ]
    },
    {
        "id": "972e3c74b98cbe54",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Energy combine",
        "func": "\n// Define the same lookup table\nconst lookupTable = {\n    \"gas\":       { value1: \"gas\",         value2: 0    },\n    \"electric1\": { value1: \"electricity\", value2: 900  },\n    \"electric2\": { value1: \"electricity\", value2: 1800 },\n    \"mix1\":      { value1: \"mix\",         value2: 900  },\n    \"mix2\":      { value1: \"mix\",         value2: 1800 }\n};\n\n\nif (msg.topic.includes('energy_mix')) {\n    context.set('energy_mix', msg.payload);\n}\nelse if (msg.topic.includes('el_power_level')) {\n    context.set('el_power', msg.payload);\n}\n\nlet value1 = context.get('energy_mix');\nlet value2 = context.get('el_power');\n\n// Perform reverse lookup\nlet foundKey = null;\nfor (let key in lookupTable) {\n    let entry = lookupTable[key];\n    if (entry.value1 === value1 && entry.value2 === value2) {\n        foundKey = key;\n        break;\n    }\n}\n\n// Return the key as payload (or a fallback if not found)\nmsg.payload = foundKey || 'unknown';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "de9f3cc27ab9eee4"
            ]
        ]
    },
    {
        "id": "97600a7142d22145",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "ab3a9f0b2e4b8d1b",
        "name": "Red error",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n.red {\n    color: red;\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(value) {\n        const controls = document.querySelectorAll('.red-error');\n        controls.forEach(el => {\n            if (value === 'OK') {\n                el.classList.remove('red');\n            } else {\n                el.classList.add('red');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "555b5779bdb6e92a",
        "type": "ui_dropdown",
        "z": "391f51e7377c8273",
        "name": "",
        "label": "&nbsp;Temperature &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "9b3a8c49293c5c6a",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "5 Â°C",
                "value": 5,
                "type": "num"
            },
            {
                "label": "6 Â°C",
                "value": 6,
                "type": "num"
            },
            {
                "label": "7 Â°C",
                "value": 7,
                "type": "num"
            },
            {
                "label": "8 Â°C",
                "value": 8,
                "type": "num"
            },
            {
                "label": "9 Â°C",
                "value": 9,
                "type": "num"
            },
            {
                "label": "10 Â°C",
                "value": 10,
                "type": "num"
            },
            {
                "label": "11 Â°C",
                "value": 11,
                "type": "num"
            },
            {
                "label": "12 Â°C",
                "value": 12,
                "type": "num"
            },
            {
                "label": "13 Â°C",
                "value": 13,
                "type": "num"
            },
            {
                "label": "14 Â°C",
                "value": 14,
                "type": "num"
            },
            {
                "label": "15 Â°C",
                "value": 15,
                "type": "num"
            },
            {
                "label": "16 Â°C",
                "value": 16,
                "type": "num"
            },
            {
                "label": "17 Â°C",
                "value": 17,
                "type": "num"
            },
            {
                "label": "18 Â°C",
                "value": 18,
                "type": "num"
            },
            {
                "label": "19 Â°C",
                "value": 19,
                "type": "num"
            },
            {
                "label": "20 Â°C",
                "value": 20,
                "type": "num"
            },
            {
                "label": "21 Â°C",
                "value": 21,
                "type": "num"
            },
            {
                "label": "22 Â°C",
                "value": 22,
                "type": "num"
            },
            {
                "label": "23 Â°C",
                "value": 23,
                "type": "num"
            },
            {
                "label": "24 Â°C",
                "value": 24,
                "type": "num"
            },
            {
                "label": "25 Â°C",
                "value": 25,
                "type": "num"
            },
            {
                "label": "26 Â°C",
                "value": 26,
                "type": "num"
            },
            {
                "label": "27 Â°C",
                "value": 27,
                "type": "num"
            },
            {
                "label": "28 Â°C",
                "value": 28,
                "type": "num"
            },
            {
                "label": "29 Â°C",
                "value": 29,
                "type": "num"
            },
            {
                "label": "30 Â°C",
                "value": 30,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "temp",
        "topicType": "str",
        "className": "grayout-target temp-target",
        "x": 675,
        "y": 220,
        "wires": [
            [
                "6f65acc61017824f",
                "783ddd3bdb365462",
                "8e85ae446e921901"
            ]
        ],
        "l": false
    },
    {
        "id": "defc780bd37644a4",
        "type": "mqtt out",
        "z": "391f51e7377c8273",
        "name": "Temperature",
        "topic": "service/truma/set/target_temp_room",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 280,
        "wires": []
    },
    {
        "id": "2dd8bdbb19a99a93",
        "type": "mqtt out",
        "z": "391f51e7377c8273",
        "name": "Fan setting",
        "topic": "service/truma/set/heating_mode",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 380,
        "wires": []
    },
    {
        "id": "d447a46d234eb48e",
        "type": "mqtt out",
        "z": "391f51e7377c8273",
        "name": "Water temperature",
        "topic": "service/truma/set/target_temp_water",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1130,
        "y": 520,
        "wires": []
    },
    {
        "id": "e123175452a0c255",
        "type": "mqtt out",
        "z": "391f51e7377c8273",
        "name": "Energy mix",
        "topic": "service/truma/set/energy_mix",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "864ec9dedede4187",
        "type": "mqtt out",
        "z": "391f51e7377c8273",
        "name": "El. power",
        "topic": "service/truma/set/el_power_level",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1100,
        "y": 700,
        "wires": []
    },
    {
        "id": "8e400b868732b2d8",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Temperature",
        "topic": "service/truma/control_status/target_temp_room",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "c1037947af34c107",
                "8e85ae446e921901"
            ]
        ]
    },
    {
        "id": "cbb6491e7b6d0646",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Fan setting",
        "topic": "service/truma/control_status/heating_mode",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "9a83d7ea5409cbf9",
                "ad544c551d347711"
            ]
        ]
    },
    {
        "id": "7befabbb0dc3e8ae",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Water temperature",
        "topic": "service/truma/control_status/target_temp_water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "1303a8a0513a810e"
            ]
        ]
    },
    {
        "id": "06db01580e13cd9f",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Energy mix",
        "topic": "service/truma/control_status/energy_mix",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 640,
        "wires": [
            [
                "972e3c74b98cbe54"
            ]
        ]
    },
    {
        "id": "64c170e5dd9b4e4e",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "El. power",
        "topic": "service/truma/control_status/el_power_level",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 700,
        "wires": [
            [
                "972e3c74b98cbe54"
            ]
        ]
    },
    {
        "id": "cc01a9f3c5a92194",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Error code",
        "topic": "service/truma/control_status/error_code",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "41c6c5947e4f9cf9"
            ]
        ]
    },
    {
        "id": "723d590927876a6d",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Connection status",
        "topic": "service/truma/control_status/alive",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 960,
        "wires": [
            [
                "41c6c5947e4f9cf9"
            ]
        ]
    },
    {
        "id": "c1037947af34c107",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Set temp",
        "func": "\nlet sw   = flow.get('switch');\nlet temp = msg.payload;\n\nif (temp !== 0 && sw === true){\n    flow.set(\"temp\", temp);\n}\n\nflow.set('temp_was_set', true);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9a83d7ea5409cbf9",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Set fan",
        "func": "\nlet tempWasSet = flow.get('temp_was_set');\nlet sw  = flow.get('switch');\nlet fan = msg.payload;\n\n\nif (tempWasSet === true) {\n    \n    flow.set('temp_was_set', false);\n    \n    if (fan === 'off'){\n        let msg1 = {payload: false, from_mqtt: true};\n        return msg1;\n    }\n    else {\n        if (sw === true) {\n            flow.set('fan', fan);\n        }\n        let msg1 = {payload: true, from_mqtt: true};\n        return msg1;\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "7df678563a819cc4"
            ]
        ]
    },
    {
        "id": "cf6b3e9d9b5ca767",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Alarm",
        "func": "\n\nif (msg.topic.includes('alive')) {\n    return null;\n}\n\nlet val = msg.payload;\n\nlet lastAlarm = context.get('lastAlarm') || false;\nlet alarm = false;\n\nif (val === 'OK') {\n    alarm = false;\n    context.set('lastAlarm', alarm);\n}\nelse {\n    alarm = val;\n}\n\nif (alarm && alarm != lastAlarm) {\n    context.set('lastAlarm', alarm);\n    msg.payload = `â ï¸ Caravan alert!\\nTruma error code:\\n${val}`;\n    node.warn(msg.payload);\n    return msg;\n}\nelse {\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "f8b062643e6b87e5"
            ]
        ]
    },
    {
        "id": "f8b062643e6b87e5",
        "type": "link out",
        "z": "391f51e7377c8273",
        "name": "Truma alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 805,
        "y": 1000,
        "wires": []
    },
    {
        "id": "783ddd3bdb365462",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Bold temp",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.temp-target');\n        controls.forEach(el => {\n            if (value === 'temp') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bce2301e12d1e263",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Bold fan",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.fan-target');\n        controls.forEach(el => {\n            if (value === 'fan') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "c8759ddbb78783e0",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Bold water",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.water-target');\n        controls.forEach(el => {\n            if (value === 'water') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "141ce33d897ac41a",
        "type": "ui_template",
        "z": "391f51e7377c8273",
        "group": "9b3a8c49293c5c6a",
        "name": "Bold mix",
        "order": 11,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.mix-target');\n        controls.forEach(el => {\n            if (value === 'mix') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "41c6c5947e4f9cf9",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Decode error",
        "func": "\n\nif (msg.topic === 'heartbeat') {\n    heartbeat = context.get('heartbeat') || 'â'; // â§ â¨ â â\n    \n    if (heartbeat === 'â') {\n        context.set('heartbeat', 'â');\n    }\n    else {\n        context.set('heartbeat', 'â');\n    }\n\n    output = context.get('output');\n    msg.payload = output + ' ' + heartbeat;\n    return [msg, null];\n}\n\nelse if (msg.topic.includes('alive')) {\n    if (msg.payload !== 'ON') {\n        msg.payload = 'LIN disconnect!';\n    }\n    else {\n        status = context.get('status');\n        if (status === undefined) {\n            msg.payload = 'OK';\n        }\n        else {\n            msg.payload = status;\n        }\n    }\n    context.set('output', msg.payload);\n    return [null, msg];\n}\n\nelse {\n    \n    switch (+msg.payload) {\n        \n        case 0:\n            msg.payload = 'OK';\n            break;\n            \n        case 7:\n            msg.payload = '230V disconnect!';\n            break;\n        \n        case 8:\n            msg.payload = 'Gas interrupted!';  // In mix mode\n            break;\n        \n        case 17:\n            msg.payload = 'Gas interrupted!';\n            break;\n            \n        default:\n            msg.payload = 'Error code: ' + msg.payload;\n            break;\n    }\n    \n    context.set('status', msg.payload);\n    context.set('output', msg.payload);\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 960,
        "wires": [
            [
                "6192907fb799f322"
            ],
            [
                "97600a7142d22145",
                "cf6b3e9d9b5ca767"
            ]
        ]
    },
    {
        "id": "8e85ae446e921901",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "391f51e7377c8273",
        "name": "",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "783ddd3bdb365462",
                "175e4cc78278dcd3"
            ],
            [
                "defc780bd37644a4"
            ]
        ]
    },
    {
        "id": "ad544c551d347711",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "391f51e7377c8273",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "fan",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "bce2301e12d1e263",
                "fe950be63ef24341"
            ],
            [
                "2dd8bdbb19a99a93"
            ]
        ]
    },
    {
        "id": "1303a8a0513a810e",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "391f51e7377c8273",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "water",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "8ede93c0d2432a6d",
                "c8759ddbb78783e0"
            ],
            [
                "d447a46d234eb48e"
            ]
        ]
    },
    {
        "id": "de9f3cc27ab9eee4",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "391f51e7377c8273",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "mix",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "c268d215c0a29312",
                "141ce33d897ac41a"
            ],
            [
                "8c25986c65998ad3"
            ]
        ]
    },
    {
        "id": "175e4cc78278dcd3",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Filter",
        "func": "\nif (msg.payload === 0) {\n    return null;\n}\nelse {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "555b5779bdb6e92a"
            ]
        ]
    },
    {
        "id": "fe950be63ef24341",
        "type": "function",
        "z": "391f51e7377c8273",
        "name": "Filter",
        "func": "\nif (msg.payload === 'off') {\n    return null;\n}\nelse {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "f6d22ec56a889695"
            ]
        ]
    },
    {
        "id": "52ba73d2c9e9a9ee",
        "type": "inject",
        "z": "391f51e7377c8273",
        "name": "Heartbeat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "heartbeat",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "41c6c5947e4f9cf9"
            ]
        ]
    },
    {
        "id": "5053378f0a38cb61",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Water temperature",
        "topic": "service/truma/control_status/current_temp_water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 900,
        "wires": [
            [
                "3dd9c191a2d56f94"
            ]
        ]
    },
    {
        "id": "6153a73b1555ed50",
        "type": "mqtt in",
        "z": "391f51e7377c8273",
        "name": "Room temperature",
        "topic": "service/truma/control_status/current_temp_room",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 840,
        "wires": [
            [
                "6427f73155b45c3a"
            ]
        ]
    },
    {
        "id": "6cb8252a67629962",
        "type": "ui_dropdown",
        "z": "c74d4096e08fa272",
        "name": "",
        "label": "&nbsp;Fan setting &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "beeb1629e827c723",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "ECO",
                "value": "eco",
                "type": "str"
            },
            {
                "label": "HIGH",
                "value": "high",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "fan",
        "topicType": "str",
        "className": "grayout-target fan-target",
        "x": 675,
        "y": 320,
        "wires": [
            [
                "c470d923eeaf436c",
                "b95d223c430a2047",
                "5b3b355a63ca805e"
            ]
        ],
        "l": false
    },
    {
        "id": "e38253167f8eb65b",
        "type": "ui_dropdown",
        "z": "c74d4096e08fa272",
        "name": "",
        "label": "&nbsp;Water temperature &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "beeb1629e827c723",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": 0,
                "type": "num"
            },
            {
                "label": "ECO",
                "value": 40,
                "type": "num"
            },
            {
                "label": "HOT",
                "value": 60,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "water",
        "topicType": "str",
        "className": "water-target",
        "x": 675,
        "y": 460,
        "wires": [
            [
                "7acc40bd20f556a5",
                "2a8c65247fe2b853",
                "375b24ad920e78fd"
            ]
        ],
        "l": false
    },
    {
        "id": "ea30ab539cdc3901",
        "type": "ui_dropdown",
        "z": "c74d4096e08fa272",
        "name": "",
        "label": "&nbsp;Energy selection &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "beeb1629e827c723",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "Gas",
                "value": "gas",
                "type": "str"
            },
            {
                "label": "Electric 1",
                "value": "electric1",
                "type": "str"
            },
            {
                "label": "Electric 2",
                "value": "electric2",
                "type": "str"
            },
            {
                "label": "Mix 1",
                "value": "mix1",
                "type": "str"
            },
            {
                "label": "Mix 2",
                "value": "mix2",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "mix",
        "topicType": "str",
        "className": "grayout-target-2 mix-target",
        "x": 675,
        "y": 620,
        "wires": [
            [
                "bac16c6e60310b9f",
                "ef835c0120eecc9d"
            ]
        ],
        "l": false
    },
    {
        "id": "8c46379d52aa9f0a",
        "type": "ui_text",
        "z": "c74d4096e08fa272",
        "group": "d88190495de6c61d",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Room temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 840,
        "wires": []
    },
    {
        "id": "1394ab4823e09e34",
        "type": "ui_text",
        "z": "c74d4096e08fa272",
        "group": "d88190495de6c61d",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Water temperature",
        "format": "{{msg.payload}} Â°C",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 670,
        "y": 900,
        "wires": []
    },
    {
        "id": "290e1633a57bc091",
        "type": "ui_text",
        "z": "c74d4096e08fa272",
        "group": "d88190495de6c61d",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "System status",
        "format": "{{value}}",
        "layout": "row-spread",
        "className": "red-error",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 660,
        "y": 960,
        "wires": []
    },
    {
        "id": "0ae1054a76ada25f",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Grayout 1",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<style>\n.grayout {\n    pointer-events: none;\n    filter: opacity(50%);\n    /*display: none;*/\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(value) {\n        const controls = document.querySelectorAll('.grayout-target');\n        controls.forEach(el => {\n            if (!value) {\n                el.classList.add('grayout');\n            } else {\n                el.classList.remove('grayout');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7acc40bd20f556a5",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Grayout 2",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<script>\n(function(scope) {\n    let states = { switch1: false, switch2: false };\n\n    scope.$watch('msg', function(msg) {\n        if (!msg || typeof msg.payload === 'undefined') return;\n\n        // Update the state depending on which switch sent the message\n        if (msg.topic === \"temp\") states.switch1 = msg.payload;\n        if (msg.topic === \"water\") states.switch2 = msg.payload;\n\n        // Enable if either switch is true\n        const shouldEnable = states.switch1 || states.switch2;\n\n        // Add or remove the 'grayout' class from the grayout-target elements\n        const elements = document.querySelectorAll('.grayout-target-2');\n        elements.forEach(el => {\n            if (shouldEnable) {\n                el.classList.remove('grayout');\n            } else {\n                el.classList.add('grayout');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "e797340e231f7c0d",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Energy select",
        "func": "\n// Define the lookup table\nconst lookupTable = {\n    \"gas\":       { value1: \"gas\",         value2: 0    },\n    \"electric1\": { value1: \"electricity\", value2: 900  },\n    \"electric2\": { value1: \"electricity\", value2: 1800 },\n    \"mix1\":      { value1: \"mix\",         value2: 900  },\n    \"mix2\":      { value1: \"mix\",         value2: 1800 }\n};\n\n// Get the input value (e.g., from msg.payload)\nlet inputValue = msg.payload;\n\n// Check the lookup table and get the results\nlet result = lookupTable[inputValue] || { value1: \"gas\", value2: 0 };\n\n// Prepare two different messages\nlet msg1 = { payload: result.value1, topic: 'mix' };  // Message for the first output\nlet msg2 = { payload: result.value2, topic: 'mix' };  // Message for the second output\n\n// Return both messages to different outputs\nreturn [msg1, msg2];  // Sends msg1 to output 1, and msg2 to output 2\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 680,
        "wires": [
            [
                "fe6f1dbf2c0b0a80"
            ],
            [
                "118396f3190fdecb"
            ]
        ]
    },
    {
        "id": "4be8133838ed7b00",
        "type": "ui_text",
        "z": "c74d4096e08fa272",
        "group": "d88190495de6c61d",
        "order": 4,
        "width": 6,
        "height": 2,
        "name": "",
        "label": "",
        "format": "",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 630,
        "y": 1080,
        "wires": [],
        "info": "Dummy block used as a spacer"
    },
    {
        "id": "b95d223c430a2047",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Set fan",
        "func": "\nflow.set(\"fan\", msg.payload);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4ec59e63f4ab1d7d",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Heating trigger",
        "func": "\nlet temp = +msg.payload;\n\nif (temp !== 0) {\n    \n    let fan      = flow.get('fan') || 'eco';\n    let lastTemp = context.get('last_temp') || 0;\n    \n    context.set('last_temp', temp);\n\n    // Prepare two different messages\n    let msg1 = { payload: temp, topic: 'temp' };\n    let msg2 = { payload: fan,  topic: 'fan' };\n    \n    if (lastTemp === 0) {\n        return [msg1, msg2];\n    }\n    else {\n        return [msg1, null];\n    }\n\n}\nelse {\n    context.set('last_temp', 0);\n    \n    let msg1 = { payload: 0,     topic: 'temp' }\n    let msg2 = { payload: 'off', topic: 'fan' };\n    return [msg1, msg2];\n}\n    \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "0ae1054a76ada25f",
                "7acc40bd20f556a5",
                "7565051f69b6a443"
            ],
            [
                "5b3b355a63ca805e",
                "c470d923eeaf436c"
            ]
        ]
    },
    {
        "id": "57ddf5b217a8f13c",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Energy combine",
        "func": "\n// Define the same lookup table\nconst lookupTable = {\n    \"gas\":       { value1: \"gas\",         value2: 0    },\n    \"electric1\": { value1: \"electricity\", value2: 900  },\n    \"electric2\": { value1: \"electricity\", value2: 1800 },\n    \"mix1\":      { value1: \"mix\",         value2: 900  },\n    \"mix2\":      { value1: \"mix\",         value2: 1800 }\n};\n\n\nif (msg.topic.includes('energy_mix')) {\n    context.set('energy_mix', msg.payload);\n}\nelse if (msg.topic.includes('el_power_level')) {\n    context.set('el_power', msg.payload);\n}\n\nlet value1 = context.get('energy_mix');\nlet value2 = context.get('el_power');\n\n// Perform reverse lookup\nlet foundKey = null;\nfor (let key in lookupTable) {\n    let entry = lookupTable[key];\n    if (entry.value1 === value1 && entry.value2 === value2) {\n        foundKey = key;\n        break;\n    }\n}\n\n// Return the key as payload (or a fallback if not found)\nmsg.payload = foundKey || 'unknown';\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 680,
        "wires": [
            [
                "ef835c0120eecc9d"
            ]
        ]
    },
    {
        "id": "aaa0f6ccd28b66b1",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "d88190495de6c61d",
        "name": "Red error",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "\n<style>\n.red {\n    color: red !important;\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.payload', function(value) {\n        const controls = document.querySelectorAll('.red-error');\n        controls.forEach(el => {\n            if (value === 'OK') {\n                el.classList.remove('red');\n            } else {\n                el.classList.add('red');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "ae8c0784f4981dc2",
        "type": "ui_dropdown",
        "z": "c74d4096e08fa272",
        "name": "",
        "label": "&nbsp;Temperature &nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;",
        "tooltip": "",
        "place": "",
        "group": "beeb1629e827c723",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "OFF",
                "value": 0,
                "type": "num"
            },
            {
                "label": "5 Â°C",
                "value": 5,
                "type": "num"
            },
            {
                "label": "6 Â°C",
                "value": 6,
                "type": "num"
            },
            {
                "label": "7 Â°C",
                "value": 7,
                "type": "num"
            },
            {
                "label": "8 Â°C",
                "value": 8,
                "type": "num"
            },
            {
                "label": "9 Â°C",
                "value": 9,
                "type": "num"
            },
            {
                "label": "10 Â°C",
                "value": 10,
                "type": "num"
            },
            {
                "label": "11 Â°C",
                "value": 11,
                "type": "num"
            },
            {
                "label": "12 Â°C",
                "value": 12,
                "type": "num"
            },
            {
                "label": "13 Â°C",
                "value": 13,
                "type": "num"
            },
            {
                "label": "14 Â°C",
                "value": 14,
                "type": "num"
            },
            {
                "label": "15 Â°C",
                "value": 15,
                "type": "num"
            },
            {
                "label": "16 Â°C",
                "value": 16,
                "type": "num"
            },
            {
                "label": "17 Â°C",
                "value": 17,
                "type": "num"
            },
            {
                "label": "18 Â°C",
                "value": 18,
                "type": "num"
            },
            {
                "label": "19 Â°C",
                "value": 19,
                "type": "num"
            },
            {
                "label": "20 Â°C",
                "value": 20,
                "type": "num"
            },
            {
                "label": "21 Â°C",
                "value": 21,
                "type": "num"
            },
            {
                "label": "22 Â°C",
                "value": 22,
                "type": "num"
            },
            {
                "label": "23 Â°C",
                "value": 23,
                "type": "num"
            },
            {
                "label": "24 Â°C",
                "value": 24,
                "type": "num"
            },
            {
                "label": "25 Â°C",
                "value": 25,
                "type": "num"
            },
            {
                "label": "26 Â°C",
                "value": 26,
                "type": "num"
            },
            {
                "label": "27 Â°C",
                "value": 27,
                "type": "num"
            },
            {
                "label": "28 Â°C",
                "value": 28,
                "type": "num"
            },
            {
                "label": "29 Â°C",
                "value": 29,
                "type": "num"
            },
            {
                "label": "30 Â°C",
                "value": 30,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "temp",
        "topicType": "str",
        "className": "temp-target",
        "x": 675,
        "y": 220,
        "wires": [
            [
                "1d5f498b49a61fb1",
                "4ec59e63f4ab1d7d"
            ]
        ],
        "l": false
    },
    {
        "id": "102150e9c523f055",
        "type": "mqtt out",
        "z": "c74d4096e08fa272",
        "name": "Temperature",
        "topic": "service/truma/set/target_temp_room",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 280,
        "wires": []
    },
    {
        "id": "159bf7d233075a2b",
        "type": "mqtt out",
        "z": "c74d4096e08fa272",
        "name": "Fan setting",
        "topic": "service/truma/set/heating_mode",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 380,
        "wires": []
    },
    {
        "id": "2c6234848be3af9e",
        "type": "mqtt out",
        "z": "c74d4096e08fa272",
        "name": "Water temperature",
        "topic": "service/truma/set/target_temp_water",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1130,
        "y": 520,
        "wires": []
    },
    {
        "id": "fe6f1dbf2c0b0a80",
        "type": "mqtt out",
        "z": "c74d4096e08fa272",
        "name": "Energy mix",
        "topic": "service/truma/set/energy_mix",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "118396f3190fdecb",
        "type": "mqtt out",
        "z": "c74d4096e08fa272",
        "name": "El. power",
        "topic": "service/truma/set/el_power_level",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2c24d1c82633c69e",
        "x": 1100,
        "y": 700,
        "wires": []
    },
    {
        "id": "743d4152f8e67158",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Temperature",
        "topic": "service/truma/control_status/target_temp_room",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 280,
        "wires": [
            [
                "7565051f69b6a443"
            ]
        ]
    },
    {
        "id": "c748715438fabfcd",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Fan setting",
        "topic": "service/truma/control_status/heating_mode",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 380,
        "wires": [
            [
                "cc39a6e2aff74086",
                "5b3b355a63ca805e"
            ]
        ]
    },
    {
        "id": "a9ea96f0e1ddded5",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Water temperature",
        "topic": "service/truma/control_status/target_temp_water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "375b24ad920e78fd"
            ]
        ]
    },
    {
        "id": "2b1463bd1d674f3e",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Energy mix",
        "topic": "service/truma/control_status/energy_mix",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 640,
        "wires": [
            [
                "57ddf5b217a8f13c"
            ]
        ]
    },
    {
        "id": "44c84c6c152ac72e",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "El. power",
        "topic": "service/truma/control_status/el_power_level",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 700,
        "wires": [
            [
                "57ddf5b217a8f13c"
            ]
        ]
    },
    {
        "id": "49463f2823ece9ff",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Room temperature",
        "topic": "service/truma/control_status/current_temp_room",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 840,
        "wires": [
            [
                "8c46379d52aa9f0a"
            ]
        ]
    },
    {
        "id": "ab8c68e6c951999f",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Water temperature",
        "topic": "service/truma/control_status/current_temp_water",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 900,
        "wires": [
            [
                "1394ab4823e09e34"
            ]
        ]
    },
    {
        "id": "a3546477d33a8a89",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Error code",
        "topic": "service/truma/control_status/error_code",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "aeeecafd3aba5913"
            ]
        ]
    },
    {
        "id": "eeb94ec5ffdea417",
        "type": "mqtt in",
        "z": "c74d4096e08fa272",
        "name": "Connection status",
        "topic": "service/truma/control_status/alive",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2c24d1c82633c69e",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 960,
        "wires": [
            [
                "aeeecafd3aba5913"
            ]
        ]
    },
    {
        "id": "cc39a6e2aff74086",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Set fan",
        "func": "\nfan = msg.payload\n    \nif (fan !== 'off'){\n    flow.set('fan', fan);\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cc06935f987801fd",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Alarm",
        "func": "\n\nif (msg.topic.includes('alive')) {\n    return null;\n}\n\nlet val = msg.payload;\n\nlet lastAlarm = context.get('lastAlarm') || false;\nlet alarm = false;\n\nif (val === 'OK') {\n    alarm = false;\n    context.set('lastAlarm', alarm);\n}\nelse {\n    alarm = val;\n}\n\nif (alarm && alarm != lastAlarm) {\n    context.set('lastAlarm', alarm);\n    msg.payload = `â ï¸ Caravan alert!\\nTruma error code:\\n${val}`;\n    node.warn(msg.payload);\n    return msg;\n}\nelse {\n    return null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1000,
        "wires": [
            [
                "60b4291ab1bc4195"
            ]
        ]
    },
    {
        "id": "60b4291ab1bc4195",
        "type": "link out",
        "z": "c74d4096e08fa272",
        "name": "Truma alarm",
        "mode": "link",
        "links": [
            "2f93affb367a865e"
        ],
        "x": 805,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1d5f498b49a61fb1",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Bold temp",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.temp-target');\n        controls.forEach(el => {\n            if (value === 'temp') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "c470d923eeaf436c",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Bold fan",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.fan-target');\n        controls.forEach(el => {\n            if (value === 'fan') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "2a8c65247fe2b853",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Bold water",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.water-target');\n        controls.forEach(el => {\n            if (value === 'water') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "bac16c6e60310b9f",
        "type": "ui_template",
        "z": "c74d4096e08fa272",
        "group": "beeb1629e827c723",
        "name": "Bold mix",
        "order": 10,
        "width": 0,
        "height": 0,
        "format": "<style>\n.bold {\n    font-weight: bold;\n}\n</style>\n\n<script>\n(function(scope) {\n    scope.$watch('msg.topic', function(value) {\n        const controls = document.querySelectorAll('.mix-target');\n        controls.forEach(el => {\n            if (value === 'mix') {\n                el.classList.add('bold');\n            } else {\n                el.classList.remove('bold');\n            }\n        });\n    });\n})(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "aeeecafd3aba5913",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Decode error",
        "func": "\n\nif (msg.topic === 'heartbeat') {\n    heartbeat = context.get('heartbeat') || 'â'; // â§ â¨ â â\n    \n    if (heartbeat === 'â') {\n        context.set('heartbeat', 'â');\n    }\n    else {\n        context.set('heartbeat', 'â');\n    }\n\n    output = context.get('output');\n    msg.payload = output + ' ' + heartbeat;\n    return [msg, null];\n}\n\nelse if (msg.topic.includes('alive')) {\n    if (msg.payload !== 'ON') {\n        msg.payload = 'LIN disconnect!';\n    }\n    else {\n        status = context.get('status');\n        if (status === undefined) {\n            msg.payload = 'OK';\n        }\n        else {\n            msg.payload = status;\n        }\n    }\n    context.set('output', msg.payload);\n    return [null, msg];\n}\n\nelse {\n    \n    switch (+msg.payload) {\n        \n        case 0:\n            msg.payload = 'OK';\n            break;\n            \n        case 7:\n            msg.payload = '230V disconnect!';\n            break;\n        \n        case 8:\n            msg.payload = 'Gas interrupted!';  // In mix mode\n            break;\n        \n        case 17:\n            msg.payload = 'Gas interrupted!';\n            break;\n            \n        default:\n            msg.payload = 'Error code: ' + msg.payload;\n            break;\n    }\n    \n    context.set('status', msg.payload);\n    context.set('output', msg.payload);\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 960,
        "wires": [
            [
                "290e1633a57bc091"
            ],
            [
                "aaa0f6ccd28b66b1",
                "cc06935f987801fd"
            ]
        ]
    },
    {
        "id": "7565051f69b6a443",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "c74d4096e08fa272",
        "name": "",
        "x": 680,
        "y": 280,
        "wires": [
            [
                "1d5f498b49a61fb1",
                "ae8c0784f4981dc2",
                "df51382627e252a7"
            ],
            [
                "102150e9c523f055"
            ]
        ]
    },
    {
        "id": "5b3b355a63ca805e",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "c74d4096e08fa272",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "fan",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 380,
        "wires": [
            [
                "c470d923eeaf436c",
                "4a65ed61376cb495"
            ],
            [
                "159bf7d233075a2b"
            ]
        ]
    },
    {
        "id": "375b24ad920e78fd",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "c74d4096e08fa272",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "water",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 520,
        "wires": [
            [
                "e38253167f8eb65b",
                "2a8c65247fe2b853"
            ],
            [
                "2c6234848be3af9e"
            ]
        ]
    },
    {
        "id": "ef835c0120eecc9d",
        "type": "subflow:2b1e3a255c9f7549",
        "z": "c74d4096e08fa272",
        "name": "",
        "env": [
            {
                "name": "topic",
                "value": "mix",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 680,
        "wires": [
            [
                "ea30ab539cdc3901",
                "bac16c6e60310b9f"
            ],
            [
                "e797340e231f7c0d"
            ]
        ]
    },
    {
        "id": "4a65ed61376cb495",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Filter",
        "func": "\nif (msg.payload === 'off') {\n    return null;\n}\nelse {\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "6cb8252a67629962"
            ]
        ]
    },
    {
        "id": "29154267620d677a",
        "type": "inject",
        "z": "c74d4096e08fa272",
        "name": "Heartbeat",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "heartbeat",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1080,
        "wires": [
            [
                "aeeecafd3aba5913"
            ]
        ]
    },
    {
        "id": "df51382627e252a7",
        "type": "function",
        "z": "c74d4096e08fa272",
        "name": "Set topic",
        "func": "\nmsg.topic = 'temp';\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "0ae1054a76ada25f",
                "7acc40bd20f556a5"
            ]
        ]
    }
]